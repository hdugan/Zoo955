# plot(watersheds)
# watersheds = readOGR('Data/YaharaBasins/Yahara_Basin.shp',layer = 'Yahara_Basin')
# plot(watersheds)
m.ws = readOGR('Data/YaharaBasins/Mendota_Basin.shp',layer = 'Mendota_Basin')
plot(m.ws,add=T,col='red3')
mendota.bathy = readOGR('Data/Bathymetry/mendota-contours-all.shp',layer = 'mendota-contours-all')
mendota = lakes[lakes@data$LAKEID == 'ME',]
plot(mendota)
mendota@polygons
# total area
sapply(slot(lakes, "polygons"), slot, "area")
mendota@polygons[[1]]@area
mendota@polygons[[1]]@Polygons[[1]]@area
mendota.bathy@polygons[[1]]@area
library(dplyr)
mendota.bathy@data %>% group_by(ID) %>%
summarise_at('AREA_m2',sum) %>%
arrange(ID)
a = mendota.bathy[mendota.bathy@data$ID == '30',]
b = mendota.bathy[mendota.bathy@data$ID == '35',]
sum(sapply(slot(a, "polygons"), slot, "area"))
sum(sapply(slot(b, "polygons"), slot, "area"))
plot(a[1,],col='navy')
plot(a[2,],col='red',add=T)
library(rgeos)
?gUnaryUnion
plot(a)
gUnaryUnion(a)
union.a = gUnaryUnion(a)
plot(union.a)
sum(sapply(slot(union.a, "polygons"), slot, "area"))
sum(sapply(slot(a, "polygons"), slot, "area"))
b = mendota.bathy[mendota.bathy@data$ID == '35',]
plot(b)
plot(a)
b = mendota.bathy[mendota.bathy@data$ID == '50',]
plot(b)
union.b = gUnaryUnion(b)
plot(union.b)
sum(sapply(slot(union.b, "polygons"), slot, "area"))
plot(a[1,],col='navy')
plot(a[2,],col='red',add=T)
sum(sapply(slot(a, "polygons"), slot, "area"))
sapply(slot(a, "polygons"), slot, "area")
plot(a[1,],col='navy')
plot(a[2:6,],col='red',add=T)
gUnaryUnion(mendota.bathy,id = 'ID')
b = gUnaryUnion(mendota.bathy,id = 'ID')
plot(b)
?disaggregate
disaggregate(a)
c = disaggregate(a)
plot(c)
a == c
plot(a)
c = disaggregate(a,hole = T)
plot(c)
plot(c[1,])
mendota.bathy@data$ID
?apply
group_by(mendota.bathy@data$ID)
group_by(mendota.bathy@data,ID)
mendota.bathy[group_by(mendota.bathy@data,ID),]
mendota.bathy[group_by(mendota.bathy@data,ID)]
group_by(mendota.bathy,data$ID)
aggregate(x = mendota.bathy, by = ID, FUN = sum)
aggregate(x = mendota.bathy, by = 'ID', FUN = sum)
head(mendota.bathy@data)
mendota.bathy@data
sp::aggregate(x = mendota.bathy, by = ID, FUN = sum)
library(sp)
sp::aggregate(x = mendota.bathy, by = ID, FUN = sum)
library(sf)
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
nc <- st_read('Data/Bathymetry/mendota-contours-all.shp')
plot(nc)
aggregate(nc,by=ID)
aggregate(nc,by=ID,FUN = sum)
aggregate(nc,by='ID',FUN = sum)
group_by(nc,ID)
crs(nc)
CRS(nc)
nc
CRS(mendota.bathy)
crs(mendota.bathy)
library(Raster)
library(raster)
crs(mendota.bathy)
head(mendota.bathy)
summary(mendota.bathy)
nc
st_geometry(nc)
attributes(mendota.bathy)
attributes(nc)
knitr::opts_chunk$set(echo = TRUE)
sf.bathy <- st_read('Data/Bathymetry/mendota-contours-all.shp')
?st_read
area(sf.bathy)
st_area(sf.bathy)
st_length(sf.bathy)
group_by(sf.bathy,ID)
sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
summarise_at(AREA.m2,sum)
sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
summarise_at('AREA.m2',sum)
st_union(a)
st_union(sf.bathy)
a = st_union(sf.bathy)
plot(a)
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
st_union()
areas
st_combine(sf.bathy)
b = st_combine(sf.bathy)
a == b
plot(b)
plot(a)
a
b
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
aggregate()
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
aggregate(by = ID)
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
aggregate(by = 'ID')
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
aggregate(by = 'ID',FUN = sum)
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
aggregate(by = ID,FUN = sum)
aggregate(sf.bathy,by=ID)
aggregate(sf.bathy,by='ID')
aggregate(sf.bathy,by='ID',FUN=sum)
aggregate(sf.bathy,by=sf.bathy$ID)
aggregate(sf.bathy,by=sf.bathy$ID,sum)
aggregate(sf.bathy,by=as.list(sf.bathy$ID),sum)
as.list(sf.bathy$ID)
aggregate(sf.bathy,by=as.list(sf.bathy$ID))
aggregate(sf.bathy,by=as.list(sf.bathy$ID).sum)
aggregate(sf.bathy,by=as.list(sf.bathy$ID),sum)
aggregate(sf.bathy,by=as.list(sf.bathy$ID),sum)
aggregate(sf.bathy,by=as.list(sf.bathy$ID),FUN=sum)
aggregate(x = sf.bathy,by=as.list(sf.bathy$ID),FUN=sum)
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
st_cast()
areas
sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
st_cast()
summarise_at('AREA.m2',sum)
sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
st_cast() %>%
summarise_at('AREA.m2',sum)
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
lapply(st_union)
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
split(.$ID) %>%
lapply(st_union)
areas
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
# group_by(ID) %>%
split(.$ID) %>%
lapply(st_union)
areas
plot(areas)
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
# group_by(ID) %>%
split(.$ID) %>%
lapply(st_union)%>%
do.call(c, .)
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
st_union()
areas
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
dplyr::summarise(area = st_union(ID)) %>%
st_union()
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
ungroup()
areas
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
summarise(geog = st_union(geometry))
areas
geometry()
geometry(sf.bathy)
geometry(sf.bathy)
geometry(mendota.bathy)
geometry(areas)
sf.bathy
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
summarise(areas = st_union(ID))
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
summarise(areas = st_union(geometry))
areas
plot(areas)
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID)
areas
st_area(areas)
## Linking to GEOS 3.5.1, GDAL 2.1.2, proj.4 4.9.3
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
summarise(areas = st_union(geometry))
st_area(areas)
areas$ID
data.frame(ID = areas$ID,area = st_area(areas)  )
areas = sf.bathy %>% mutate(AREA.m2 = st_area(sf.bathy)) %>%
group_by(ID) %>%
summarise(areas = st_union(geometry))
st_area(areas)
data.frame(ID = areas$ID,area = st_area(areas))
mendota.bathy@data %>% group_by(ID) %>%
summarise_at('AREA_m2',sum) %>%
arrange(ID)
mendota.bathy@data %>% group_by(ID) %>%
summarise_at('AREA_m2',sum) %>%
arrange(ID)
head(mendota.bathy)
areas[1,]
st_difference(areas[1,],areas[2,])
areas[2,]
areas
plot(areas)
st_transform(areas,crs(mendota))
crs(mendota)
crs(areas) = crs(mendota)
crs(mendota)
st_crs(areas) = crs(mendota)
st_crs(areas)
st_crs(areas) = CRS(mendota)
mendota
st_crs(areas) = mendota
st_crs(mendota)
mendota
st_crs(crs(mendota))
st_crs(CRS(mendota))
CRS(mendota)
library(raster)
CRS(mendota)
crs(mendota)
st_set_crs(mendota)
proj4string(mendota)
st_crs(proj4string(mendota))
st_crs(areas) = st_crs(proj4string(mendota))
areas
st_read('Data/yld_study_lakes.shp')
lakes2 = st_read('Data/yld_study_lakes.shp')
plots(lakes2)
plot(lakes2)
lakes2 %>% filter(LAKEID == 'ME')
mendota = lakes2 %>% filter(LAKEID == 'ME')
plot(mendota)
lakes2 = st_read('Data/yld_study_lakes.shp')
mendota = lakes2 %>% filter(LAKEID == 'ME')
st_crs(mendota)
st_crs(areas)
st_crs(areas) = st_crs(mendota)
as(mendota, "Spatial")
st_difference(areas[1,],areas[2,])
(areas[1,]
)
st_difference(areas[1,],areas[2,])
areas[2,]
buffer <- st_buffer(areas, dist = 30000)
plot(buffer, border = 'red')
buffer <- st_buffer(areas, dist = 3000)
buffer <- st_buffer(mendota, dist = 3000)
plot(buffer)
plot(buffer$AREA)
plot(buffer$geometry)
plot(mendota$geometry)
plot(buffer$geometry,add=T)
plot(mendota$geometry)
plot(buffer$geometry,add=T)
plot(buffer$geometry)
plot(mendota$geometry,add=T)
plot(mendota$geometry,add=T,col='turquoise')
?st_difference
st_difference(areas[1,],areas[2,])
st_difference(areas[1,],mendota)
a = st_difference(areas[1,],mendota)
plot(a)
a = st_difference(areas[2,],mendota)
plot(a)
a = st_difference(areas[6,],mendota)
plot(a)
areas[6,]
a = st_difference(areas[6,],mendota)
plot(a)
a
plot(areas[6,])
a = st_difference(areas[6,]$geometry,mendota)
plot(a)
a = st_difference(areas[1,]$geometry,mendota)
plot(a)
a = st_difference(areas[1,]$geometry,areas[2,]$geometry)
plot(a)
a = st_difference(areas[1,]$geometry,areas[6,]$geometry)
plot(a)
plot(a,col='turquoise')
a
str(a)
sum(a)
str(areas)
a = st_difference(sf.bathy[1,],sf.bathy[6,])
plot(a,col='turquoise')
a = st_difference(sf.bathy[1,]$geometry,sf.bathy[6,]$geometry)
plot(a,col='turquoise')
st_overlaps(areas)
st_overlaps(areas,mendota)
st_overlaps(sf.bathy,mendota)
st_crs(sf.bathy) = st_crs(mendota)
st_overlaps(sf.bathy,mendota)
a = st_overlaps(sf.bathy,mendota)
a
View(a)
?st_overlaps
a = st_intersects(sf.bathy,mendota)
a
st_intersects(areas,mendota)
buffer <- st_buffer(areas, dist = 3000)
plot(buffer$geometry)
plot(mendota$geometry,add=T,col='turquoise')
mendota
library(rgdal)
lakes = readOGR('Data/yld_study_lakes.shp',layer = 'yld_study_lakes',stringsAsFactors = F)
mendota = lakes[lakes@data$LAKEID == 'ME',]
plot(mendota)
cfl = data.frame(lat = 43.077391, long = -89.404241)
coordinates(cfl) = ~long+lat
cfl
crs(cfl) = 'espg:4326'
crs(cfl) = CRS("+init=epsg:4326")
cfl = spTransform(cfl,crs(cfl))
plot(cfl,add=T)
cfl = spTransform(cfl,crs(mendota))
plot(mendota)
plot(cfl,add=T)
plot(cfl,add=T,pch=16,col='red3')
plot(cfl,add=T,pch=16,col='red3',cex=3)
plot(mendota,col='cyan')
plot(cfl,add=T,pch=16,col='red3',cex=3)
plot(mendota,col='lighskyblue')
plot(mendota,col='lightskyblue')
plot(cfl,add=T,pch=16,col='red3',cex=3)
plot(mendota,col='lightskyblue',main='Lake Mendota')
plot(cfl,add=T,pch=16,col='red3',cex=3)
raster('~/NLCD/nlcd_2011_landcover_2011_edition_2014_10_10/nlcd_2011_landcover_2011_edition_2014_10_10.img')
nlcd = raster('~/NLCD/nlcd_2011_landcover_2011_edition_2014_10_10/nlcd_2011_landcover_2011_edition_2014_10_10.img')
crs(nlcd)
setwd("~/Rpackages/Zoo955/Zoo955_WeeklyAssignments")
?st_disjoint
?st_triangulate
st_crs(areas) <- 4326
cntrd = st_centroid(lakes)
lakes
lakes = st_read('Data/yld_study_lakes.shp')
cntrd = st_centroid(lakes)
setwd("~/Rpackages/Zoo955/Lecture3_Shapefiles")
lakes = st_read('Data/yld_study_lakes.shp')
cntrd = st_centroid(lakes)
cntrd
## Warning in st_centroid.sfc(ncg): st_centroid does not give correct
## centroids for longitude/latitude data
ncg2 = (ncg - cntrd) * rot(pi/2) * .75 + cntrd
plot(ncg2, add = TRUE)
## Warning in st_centroid.sfc(ncg): st_centroid does not give correct
## centroids for longitude/latitude data
ncg2 = (lakes - cntrd) * rot(pi/2) * .75 + lakes
rot(pi/2)
?rotate
rotate(pi/2)
## Warning in st_centroid.sfc(ncg): st_centroid does not give correct
## centroids for longitude/latitude data
ncg2 = (lakes - cntrd) * (pi/2) * .75 + lakes
(lakes - cntrd) * (pi/2) * .75
(lakes - cntrd)
glakes = st_geometry(lakes)
cntrd = st_centroid(glakes)
## Warning in st_centroid.sfc(ncg): st_centroid does not give correct
## centroids for longitude/latitude data
ncg2 = (glakes - cntrd) * (pi/2) * .75 + glakes
(glakes - cntrd)
(glakes - cntrd) * (pi/2)
(glakes - cntrd) * (pi/2) * .75
(glakes - cntrd) * (pi/2) * .75 + glakes
## Warning in st_centroid.sfc(ncg): st_centroid does not give correct
## centroids for longitude/latitude data
ncg2 = (glakes - cntrd) * (pi/2) * .75 + cntrd
plot(ncg2, add = TRUE)
plot(ncg2)
plot(glakes)
plot(ncg2,add=T)
## Warning in st_centroid.sfc(ncg): st_centroid does not give correct
## centroids for longitude/latitude data
ncg2 = (glakes - cntrd) * fot(pi/2) * .75 + cntrd
## Warning in st_centroid.sfc(ncg): st_centroid does not give correct
## centroids for longitude/latitude data
ncg2 = (glakes - cntrd) * rot(pi/2) * .75 + cntrd
## Warning in st_centroid.sfc(ncg): st_centroid does not give correct
## centroids for longitude/latitude data
ncg2 = (glakes - cntrd) * 1.75 + cntrd
plot(glakes)
plot(ncg2,add=T)
st_buffer(glakes,1.75)
nb = st_buffer(glakes,1.75)
plot(nb,add=T,border='red')
nb = st_buffer(glakes,1.75)
plot(nb,add=T,border='red')
nb = st_buffer(glakes,3000)
plot(nb,add=T,border='red')
glakes * 1.75
nc = glakes * 1.75
plot(nc,add=T,border='blue')
plot(nc,add=T,border='blue')
plot(nc)
nc = glakes * 1.75
plot(nc,add=T,border='blue')
plot(ncg2,add=T)
plot(glakes,add=T)
nc
glakes
nb = st_buffer(glakes,3000)
plot(nb,add=T,border='red')
plot(glakes)
nb = st_buffer(glakes,3000)
plot(nb,add=T,border='red')
nb = st_buffer(glakes,1000)
plot(nb,add=T,border='red')
nb = st_buffer(glakes,5000)
plot(nb,add=T,border='red')
plot(glakes)
plot(ncg2,add=T)
plot(glakes)
nb = st_buffer(glakes,500)
plot(nb,add=T,border='red')
st_overlaps(nb)
nb
glakes
lakes
st_overlaps(nb)
nb = st_buffer(glakes,400)
st_overlaps(nb)
glakes - cntrd
ncg2 = (glakes - cntrd) * 2 + cntrd
plot(ncg2,add=T,border='blue')
st_overlap(ncg2)
st_overlaps(ncg2)
plot(ncg2,border='blue')
ncg2 = (glakes - cntrd) * 1.25 + cntrd
plot(ncg2,border='blue')
st_overlaps(ncg2)
ncg2 = (glakes - cntrd) * 1.5 + cntrd
plot(ncg2,border='blue')
st_overlaps(ncg2)
ncg2 = (glakes - cntrd) * 3 + cntrd
plot(ncg2,border='blue')
st_overlaps(ncg2)
ncg2 = (glakes - cntrd) * 1.5 + cntrd
plot(ncg2,border='blue')
st_overlaps(ncg2)
ncg2 = (glakes - cntrd) * 2 + cntrd
ncg2
ncg2[2,]
ncg2
ncg2[2]
st_intersects(ncg2[2],ncg2[3,])
st_intersects(ncg2[2],ncg2[3])
int = st_intersects(ncg2[2],ncg2[3])
plot(int)
int
int = st_intersection(ncg2[2],ncg2[3])
plot(int)
area(int)
st_area(int)
st_area(ncg2[2]) - st_area(int)
(st_area(ncg2[2]) - st_area(int)) / st_area(ncg2[2])
1 - (st_area(ncg2[2]) - st_area(int)) / st_area(ncg2[2])
st_area(int)/ st_area(ncg2[2])
